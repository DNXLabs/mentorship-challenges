#!/bin/bash
# Health check script for {{ app.name }}
# Generated by Ansible on {{ ansible_date_time.iso8601 }}

TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')
HEALTH_STATUS="OK"
ISSUES=()

# Check services
if ! systemctl is-active --quiet mysql; then
    HEALTH_STATUS="CRITICAL"
    ISSUES+=("MySQL service down")
fi

if ! systemctl is-active --quiet nginx; then
    HEALTH_STATUS="CRITICAL"
    ISSUES+=("Nginx service down")
fi

# Check PM2
PM2_STATUS=$(su {{ app.user }} -c "pm2 jlist" 2>/dev/null | jq -r '.[0].pm2_env.status' 2>/dev/null)
if [ "$PM2_STATUS" != "online" ]; then
    HEALTH_STATUS="CRITICAL"
    ISSUES+=("PM2 API offline")
fi

# Check API endpoint
API_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:{{ app.port }}/api/submissions 2>/dev/null)
if [ "$API_STATUS" != "200" ]; then
    HEALTH_STATUS="WARNING"
    ISSUES+=("API endpoint returning HTTP $API_STATUS")
fi

# Check database connectivity
if ! mysql -u {{ database.user }} -p{{ database.password }} -h {{ database.host }} -e "SELECT 1;" {{ database.name }} >/dev/null 2>&1; then
    HEALTH_STATUS="CRITICAL"
    ISSUES+=("Database connection failed")
fi

# Check disk space
DISK_USAGE=$(df / | tail -1 | awk '{print $5}' | sed 's/%//')
if [ "$DISK_USAGE" -gt 90 ]; then
    HEALTH_STATUS="WARNING"
    ISSUES+=("Disk usage high: ${DISK_USAGE}%")
fi

# Check memory usage
MEMORY_USAGE=$(free | grep Mem | awk '{printf "%.0f", $3/$2 * 100.0}')
if [ "$MEMORY_USAGE" -gt 90 ]; then
    HEALTH_STATUS="WARNING"
    ISSUES+=("Memory usage high: ${MEMORY_USAGE}%")
fi

# Log results
if [ "$HEALTH_STATUS" = "OK" ]; then
    echo "[$TIMESTAMP] HEALTH_CHECK: OK - All systems operational"
else
    echo "[$TIMESTAMP] HEALTH_CHECK: $HEALTH_STATUS - Issues: ${ISSUES[*]}"
fi

# Exit with appropriate code
case $HEALTH_STATUS in
    "OK") exit 0 ;;
    "WARNING") exit 1 ;;
    "CRITICAL") exit 2 ;;
esac
