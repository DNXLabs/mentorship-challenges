// Database Configuration - Week 3 (Amazon RDS)
// Generated by Ansible on {{ ansible_date_time.iso8601 }}

const mysql = require('mysql2/promise');

const dbConfig = {
  host: process.env.DB_HOST || '{{ terraform_rds_endpoint }}',
  user: process.env.DB_USER || '{{ terraform_rds_app_username }}',
  password: process.env.DB_PASSWORD || '{{ terraform_rds_app_password }}',
  database: process.env.DB_NAME || '{{ terraform_rds_database_name }}',
  port: process.env.DB_PORT || 3306,
  
  // Connection pool settings for RDS
  connectionLimit: parseInt(process.env.DB_CONNECTION_LIMIT) || 10,
  acquireTimeout: parseInt(process.env.DB_ACQUIRE_TIMEOUT) || 60000,
  timeout: parseInt(process.env.DB_TIMEOUT) || 60000,
  
  // RDS specific settings
  ssl: {
    // For RDS, we can use SSL but don't require certificate verification for dev
    rejectUnauthorized: false
  },
  
  // Reconnection settings
  reconnect: true,
  idleTimeout: 300000,
  
  // Character set
  charset: 'utf8mb4',
  
  // Timezone handling
  timezone: 'Z'
};

// Create connection pool
const pool = mysql.createPool(dbConfig);

// Test connection function
async function testConnection() {
  try {
    const connection = await pool.getConnection();
    console.log('✅ Database connection successful');
    console.log(`Connected to: ${dbConfig.host}:${dbConfig.port}/${dbConfig.database}`);
    connection.release();
    return true;
  } catch (error) {
    console.error('❌ Database connection failed:', error.message);
    return false;
  }
}

// Graceful shutdown
process.on('SIGINT', async () => {
  console.log('Closing database connections...');
  await pool.end();
  process.exit(0);
});

module.exports = {
  pool,
  testConnection,
  config: dbConfig
};
