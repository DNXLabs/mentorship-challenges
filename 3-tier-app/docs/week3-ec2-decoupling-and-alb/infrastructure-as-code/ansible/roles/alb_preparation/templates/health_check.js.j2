// Health Check Endpoint for ALB Integration
// Generated by Ansible on {{ ansible_date_time.iso8601 }}

const express = require('express');
const router = express.Router();

// Import database connection if available
let dbConnection;
try {
  dbConnection = require('../config/database');
} catch (error) {
  console.warn('Database connection not available for health checks');
}

// Health check endpoint
router.get('/health', async (req, res) => {
  const healthCheck = {
    status: 'healthy',
    timestamp: new Date().toISOString(),
    uptime: process.uptime(),
    environment: process.env.NODE_ENV || 'development',
    version: process.env.APP_VERSION || '1.0.0',
    deployment_stage: process.env.DEPLOYMENT_STAGE || 'unknown',
    server: {
      hostname: require('os').hostname(),
      platform: require('os').platform(),
      arch: require('os').arch(),
      memory: {
        used: Math.round(process.memoryUsage().heapUsed / 1024 / 1024),
        total: Math.round(process.memoryUsage().heapTotal / 1024 / 1024),
        external: Math.round(process.memoryUsage().external / 1024 / 1024)
      }
    },
    checks: {
      api: 'healthy',
      database: 'unknown'
    }
  };

  try {
    // Test database connection if available
    if (dbConnection && dbConnection.testConnection) {
      const dbHealthy = await dbConnection.testConnection();
      healthCheck.checks.database = dbHealthy ? 'healthy' : 'unhealthy';
      
      if (!dbHealthy) {
        healthCheck.status = 'degraded';
      }
    }

    // Additional health checks can be added here
    // For example: Redis, external APIs, file system, etc.

    // Determine overall status
    const hasUnhealthyChecks = Object.values(healthCheck.checks).includes('unhealthy');
    if (hasUnhealthyChecks) {
      healthCheck.status = 'unhealthy';
      return res.status(503).json(healthCheck);
    }

    // Return healthy status
    res.status(200).json(healthCheck);

  } catch (error) {
    console.error('Health check error:', error);
    
    healthCheck.status = 'unhealthy';
    healthCheck.error = error.message;
    healthCheck.checks.api = 'unhealthy';
    
    res.status(503).json(healthCheck);
  }
});

// Readiness check (for Kubernetes-style deployments)
router.get('/ready', async (req, res) => {
  try {
    // Check if application is ready to serve traffic
    const readinessCheck = {
      status: 'ready',
      timestamp: new Date().toISOString(),
      checks: {
        database: 'unknown',
        dependencies: 'ready'
      }
    };

    // Test database connection
    if (dbConnection && dbConnection.testConnection) {
      const dbReady = await dbConnection.testConnection();
      readinessCheck.checks.database = dbReady ? 'ready' : 'not_ready';
      
      if (!dbReady) {
        readinessCheck.status = 'not_ready';
        return res.status(503).json(readinessCheck);
      }
    }

    res.status(200).json(readinessCheck);

  } catch (error) {
    console.error('Readiness check error:', error);
    res.status(503).json({
      status: 'not_ready',
      timestamp: new Date().toISOString(),
      error: error.message
    });
  }
});

// Liveness check (basic ping)
router.get('/live', (req, res) => {
  res.status(200).json({
    status: 'alive',
    timestamp: new Date().toISOString(),
    uptime: process.uptime()
  });
});

module.exports = router;
