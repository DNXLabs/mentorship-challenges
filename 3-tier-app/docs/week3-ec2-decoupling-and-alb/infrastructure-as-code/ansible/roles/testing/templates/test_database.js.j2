#!/usr/bin/env node
// Database Connectivity Test for Week 3
// Generated by Ansible on {{ ansible_date_time.iso8601 }}

const mysql = require('mysql2/promise');
require('dotenv').config({ path: '/opt/3-tier-app/api/.env' });

async function testDatabaseConnectivity() {
  console.log('=== Database Connectivity Test ===');
  console.log(`Testing connection to: ${process.env.DB_HOST}:${process.env.DB_PORT}`);
  console.log(`Database: ${process.env.DB_NAME}`);
  console.log(`User: ${process.env.DB_USER}`);
  
  try {
    // Test basic connection
    const connection = await mysql.createConnection({
      host: process.env.DB_HOST,
      user: process.env.DB_USER,
      password: process.env.DB_PASSWORD,
      database: process.env.DB_NAME,
      port: process.env.DB_PORT || 3306,
      connectTimeout: 10000
    });
    
    console.log('‚úÖ Database connection successful');
    
    // Test basic query
    const [rows] = await connection.execute('SELECT 1 as test');
    console.log('‚úÖ Basic query test passed');
    
    // Test database schema
    const [tables] = await connection.execute('SHOW TABLES');
    console.log(`‚úÖ Found ${tables.length} tables in database`);
    
    if (tables.length > 0) {
      console.log('Tables:');
      tables.forEach(table => {
        console.log(`  - ${Object.values(table)[0]}`);
      });
    }
    
    // Test application-specific tables (if they exist)
    try {
      const [users] = await connection.execute('SELECT COUNT(*) as count FROM users');
      console.log(`‚úÖ Users table: ${users[0].count} records`);
    } catch (error) {
      console.log('‚ÑπÔ∏è  Users table not found (this is normal for fresh deployments)');
    }
    
    try {
      const [submissions] = await connection.execute('SELECT COUNT(*) as count FROM form_submissions');
      console.log(`‚úÖ Form submissions table: ${submissions[0].count} records`);
    } catch (error) {
      console.log('‚ÑπÔ∏è  Form submissions table not found (this is normal for fresh deployments)');
    }
    
    // Test connection pool
    const pool = mysql.createPool({
      host: process.env.DB_HOST,
      user: process.env.DB_USER,
      password: process.env.DB_PASSWORD,
      database: process.env.DB_NAME,
      port: process.env.DB_PORT || 3306,
      connectionLimit: 5,
      acquireTimeout: 10000
    });
    
    const poolConnection = await pool.getConnection();
    console.log('‚úÖ Connection pool test passed');
    poolConnection.release();
    await pool.end();
    
    await connection.end();
    
    console.log('=== All database tests passed ===');
    process.exit(0);
    
  } catch (error) {
    console.error('‚ùå Database connectivity test failed:');
    console.error(`Error: ${error.message}`);
    console.error(`Code: ${error.code}`);
    console.error(`SQL State: ${error.sqlState || 'N/A'}`);
    
    // Provide troubleshooting hints
    console.log('\nüîß Troubleshooting hints:');
    if (error.code === 'ECONNREFUSED') {
      console.log('- Check if RDS instance is running and accessible');
      console.log('- Verify security group allows connections from this EC2 instance');
      console.log('- Confirm RDS endpoint is correct');
    } else if (error.code === 'ER_ACCESS_DENIED_ERROR') {
      console.log('- Check database username and password');
      console.log('- Verify user has proper permissions');
    } else if (error.code === 'ETIMEDOUT') {
      console.log('- Check network connectivity to RDS');
      console.log('- Verify security group rules');
      console.log('- Check if RDS is in the correct subnet');
    }
    
    process.exit(1);
  }
}

// Run the test
testDatabaseConnectivity();
